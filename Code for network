// simple_l2_switch.p4
#include <core.p4>

// Define the Ethernet header
header ethernet_t {
    bit<48> dstAddr;
    bit<48> srcAddr;
    bit<16> etherType;
}

// Define the metadata (empty in this case)
struct metadata_t { }

// Define the headers struct
struct headers_t {
    ethernet_t ethernet;
}

// Define the parser
parser MyParser(packet_in pkt, out headers_t hdr, inout metadata_t meta, inout standard_metadata_t standard_metadata) {
    state start {
        pkt.extract(hdr.ethernet);
        transition accept;
    }
}

// Define the control block
control MyIngress(inout headers_t hdr, inout metadata_t meta, inout standard_metadata_t standard_metadata) {
    action forward(bit<9> egress_port) {
        standard_metadata.egress_spec = egress_port;
    }

    action drop() {
        mark_to_drop();
    }

    table forward_table {
        key = {
            hdr.ethernet.dstAddr: exact;
        }
        actions = {
            forward;
            drop;
        }
        size = 1024;
        default_action = drop();
    }

    apply {
        if (hdr.ethernet.etherType == 0x0800) {
            forward_table.apply();
        }
    }
}

// Define the deparser
control MyDeparser(packet_out pkt, in headers_t hdr) {
    apply {
        pkt.emit(hdr.ethernet);
    }
}

// Instantiate the pipeline
V1Switch(MyParser(), MyIngress(), MyDeparser()) main;
